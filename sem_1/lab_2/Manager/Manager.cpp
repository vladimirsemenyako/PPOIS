#include "Manager.h"

Manager::Manager(std::string person_name, int age, float weight, std::string position, float budget)
: Staff(person_name, age, weight, position), budget_(budget) {}

void Manager::scheduleShift(const std::string& employee_name, const std::string& shift_time) {
    std::cout << "Scheduling shift for " << employee_name << " at " << shift_time << ".\n";
    employee_list_.push_back(employee_name);
}

void Manager::reviewPerformance(const std::string& employee_name, int rating) {
    std::cout << "Reviewing performance for " << employee_name << ". Rating: " << rating << "/5.\n";
    // Здесь можно добавить логику для записи оценки сотрудника
}

void Manager::approveBudget(float amount) {
    if (amount <= budget_) {
        budget_ -= amount;
        std::cout << "Budget approved: $" << amount << ". Remaining budget: $" << budget_ << ".\n";
    } else {
        std::cout << "Insufficient budget to approve $" << amount << ". Current budget: $" << budget_ << ".\n";
    }
}

void Manager::generateReport() {
    std::cout << "Generating report...\n";
    std::string report = "Report generated by " + getName();
    reports_.push_back(report);
    std::cout << report << "\n";
}

void Manager::handleComplaint(const std::string& complaint) {
    std::cout << "Handling complaint: " << complaint << "\n";
    // Здесь можно добавить логику для обработки жалобы
}

float Manager::getBudget() {
    return budget_;
}
